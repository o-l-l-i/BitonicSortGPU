// By Olli S.
// My basic Bitonic sort implementation, with some tools to test the functionality.
// It can't process more than 2097152 values at the moment.
// This is the compute shader code. See C# for more details.

#pragma kernel BitonicSort


RWStructuredBuffer<uint> Data;


uint _ArraySize;
uint _CompareDistance;
uint _SubarraySize;


void Swap(uint a, uint b)
{
    uint temp = Data[a];
    Data[a] = Data[b];
    Data[b] = temp;
}


bool ShouldSwapAsc(uint a, uint b)
{
    if (Data[a] > Data[b]) {
        return true;
    }
    else {
        return false;
    }
}

bool ShouldSwapDesc(uint a, uint b)
{
    if (Data[a] < Data[b]) {
        return true;
    }
    else {
        return false;
    }
}


[numthreads(1024, 1, 1)]
void BitonicSort ( uint3 id : SV_DispatchThreadID )
{
    // THIS ONLY WORKS FOR POWER OF TWO VALUES. ADD PADDING TO THE DATA IF YOU NEED DIFFERENT.

    // Notes:

    // CREATE A BITONIC SEQUENCE:
    // Step 1 initial: (4 numbers will form asc-desc bitonic sequence, two pairs, sizes 2,2).
    // Sequences 4 (size 2)
    // Comparison distance 1.
    // 3, 7, 4, 8, 6, 2, 1, 5
    // aaa   ddd   aaa   ddd
    // Step 1 result:
    // 3, 7, 8, 4, 2, 6, 5, 1

    // Step 2 initial: (Two 4-element bitonic sequences with numbers 3,7,8,4 and 2,6,5,1.)
    // Sequences 2 (size 4)
    // Comparison distance 2.
    // 3, 7, 8, 4, 2, 6, 5, 1
    // aaaaaa         dddddd
    //    aaaaaa   dddddd
    // Step 2 result:
    // 3, 4, 8, 7, 5, 6, 2, 1

    // Step 3 initial:
    // Sequences 2. (size 4)
    // Comparison distance: 1.
    // 3, 4, 8, 7, 5, 6, 2, 1
    // aaa   aaa   ddd   dddd
    // Result:
    // 3, 4, 7, 8, 6, 5, 2, 1


    // PERFORM BITONIC SORT:
    // Step 4 initial: (Right now we got one bitonic sequence, sizes 4,4, asc,desc)
    // Sequences 1. (size 8)
    // Compare distance is 4.
    // 3, 4, 7, 8, 6, 5, 2, 1
    // \__________/
    //    \__________/
    //       \__________/
    //          \__________/
    // Step 4 result:
    // 3, 4, 2, 1, 6, 5, 7, 8

    // Step 5 initial: (Right now we got 2 bitonic sequences, sizes 2,2, and 2,2, asc,desc and desc,asc)
    // Sequences 2. (size 8)
    // Compare distance is 2.
    // 3, 4, 2, 1, 6, 5, 7, 8
    // \____/      \____/
    //    \____/      \____/
    // 2, 1, 3, 4, 6, 5, 7, 8

    // Step 6 initial: (Finally, we got 4 bitonic sequences, 1,1 and 1,1 and 1,1 and 1,1.)
    // Sequences 4. (size 8)
    // Compare distance 1.
    // 2, 1, 3, 4, 6, 5, 7, 8
    // \_/   \_/   \_/   \_/
    // Step 6 result:
    // 1, 2, 3, 4, 5, 6, 7, 8


    // SUBARRAY SIZE AND COMP. DISTANCE IN THE TEST SEQUENCE (8 numbers):
    // Step 1, subarray size 2, compare distance 1
    // Step 2, subarray size 4, compare distance 2
    // Step 3, subarray size 4, compare distance 1
    // Step 4, subarray size 8, compare distance 4
    // Step 5, subarray size 8, compare distance 2
    // Step 6, subarray size 8, compare distance 1

    // STEPS 1-6 RESULTS
    // Initial state:
    // 3, 7, 4, 8, 6, 2, 1, 5
    // Step 1 result:
    // 3, 7, 8, 4, 2, 6, 5, 1
    // step 2 result:
    // 3, 4, 8, 7, 5, 6, 2, 1
    // step 3 result:
    // 3, 4, 7, 8, 6, 5, 2, 1
    // step 4 result:
    // 3, 4, 2, 1, 6, 5, 7, 8
    // step 5 result:
    // 2, 1, 3, 4, 6, 5, 7, 8
    // Step 6 result:
    // 1, 2, 3, 4, 5, 6, 7, 8


    // The index of the current group where a thread ID is in:
    uint subArray = id.x / _SubarraySize;

    // Index inside a group:
    uint subArrayIndex = id.x % _SubarraySize;

    // Current left index (a thread's dispatch ID.)
    uint left = id.x;

    // Right index is thread's dispatch ID offset by the compare distance.
    uint right = left + _CompareDistance;

    // Perform sorting. Part of this happens in C#.
    if (!(_SubarraySize >= 2 && (subArrayIndex + _CompareDistance) > _SubarraySize-1))
    {
        // If it's an ascending sub-array (detected from odd-even group index, the 1st is odd, 2nd even.)
        if (subArray % 2 == 0 && ShouldSwapAsc(left, right))
            Swap(left, right);

        // If it's a descending sub-array
        else if (subArray % 2 != 0 && ShouldSwapDesc(left, right))
            Swap(right, left);
    }
}